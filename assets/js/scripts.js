// Generated by CoffeeScript 1.10.0
(function() {
  $(function() {
    var $body, $main, addPalette, addStyle, font, init, iscp, palettes, player, purchase, qr, random, resize, shuffle, styles, theStyle, wiggle, wrapColor;
    $body = $('body');
    $main = $('main');
    palettes = ['wooden-airplane-lamp', 'nighty', 'blue', 'spring', 'old-glory', 'ronald', 'cactus', 'long-sleeve', 'default'];
    styles = ['wiggle', 'fan', 'shadow', 'italic', 'from-the-other-side', 'redacted', 'farsighted', 'mini', 'jumbo'];
    init = function() {
      shuffle(palettes);
      shuffle(styles);
      addPalette();
      addStyle();
      font();
      iscp();
      purchase();
      qr();
      resize();
      return setTimeout((function() {
        wiggle();
        return $('.wrapper').addClass('loaded');
      }), 500);
    };
    resize = function() {
      font();
    };
    font = function() {
      var fontSize, newFontSize, ratio, wrapperWidth;
      fontSize = parseInt($body.css('fontSize'));
      wrapperWidth = $('.wrapper').innerWidth();
      ratio = 980 / 45;
      newFontSize = wrapperWidth / ratio;
      $body.css({
        'fontSize': newFontSize
      });
    };
    addPalette = function() {
      var $newIcon, $oldIcon, index, newPalette, palette;
      palette = $body.attr('data-palette');
      if (!palette) {
        palette = palettes[random(0, palettes.length - 1)];
      }
      index = palettes.indexOf(palette) + 1;
      if (index > palettes.length - 1) {
        index = 0;
      }
      newPalette = palettes[index];
      $oldIcon = $('link[rel="icon"]');
      $newIcon = $oldIcon.clone();
      $newIcon.attr('href', 'assets/images/icons/' + newPalette + '.png');
      $newIcon.insertAfter($oldIcon);
      $oldIcon.remove();
      $body.removeClass(palette).addClass(newPalette).attr('data-palette', newPalette);
    };
    addStyle = function(index) {
      var newStyle, style;
      style = $body.attr('data-style');
      if (style) {
        index = styles.indexOf(style) + 1;
        if (index > styles.length - 1) {
          index = 0;
        }
        newStyle = styles[index];
      } else {
        newStyle = 'wiggle';
      }
      if (style === 'wiggle') {
        $('main i').each(function() {
          $(this).stop();
        });
      }
      $body.removeClass(style).addClass(newStyle).attr('data-style', newStyle);
    };
    wiggle = function() {
      return setInterval(function() {
        var $word, height, i, results, scale, texts, time, width, x, y, z;
        if (!$body.hasClass('wiggle')) {
          return;
        }
        width = window.innerWidth;
        height = window.innerHeight;
        texts = $('main i').length;
        i = 0;
        results = [];
        while (i < texts) {
          $word = $('main i').eq(i);
          x = Math.floor(Math.random() * 3 + 1) * (Math.round(Math.random()) * 2 - 1);
          y = Math.floor(Math.random() * 3 + 1) * (Math.round(Math.random()) * 2 - 1);
          z = Math.floor(Math.random() * 3 + 1) * (Math.round(Math.random()) * 2 - 1);
          time = 90;
          scale = 1;
          if ($word.is('.symbol')) {
            scale = $word.attr('data-scale');
          }
          $word.transition({
            x: x,
            y: y,
            rotate: z,
            scale: scale
          }, time);
          results.push(i++);
        }
        return results;
      }, 90);
    };
    iscp = function() {
      $('#iscp .past').hover(function() {
        $('#iscp').toggleClass('archive');
      });
    };
    purchase = function() {
      $body.on('click', '#pcgd .svg svg:first-of-type', function() {
        $(this).insertAfter($('#pcgd .svg svg:last-of-type'));
      });
    };
    qr = function() {
      wrapColor($('#qr'));
    };
    wrapColor = function(el) {
      var $els, colors;
      colors = ['ff33ff', '3399cc', 'ff6633', 'b619cc', '33cc33', 'ff0000'];
      $els = $(el).children();
      $els.each(function(i, el) {
        var chars, colorIndex;
        if ($(el).children(':not(br)').length) {
          wrapColor(el);
        } else {
          chars = $(el).text().split('');
          $(el).empty();
          colorIndex = 0;
          $(chars).each(function(i, char) {
            var color;
            var color;
            color = colors[colorIndex];
            $(el).append('<span style="color:#' + color + '">' + char + '</span>');
            if (colorIndex < colors.length - 1) {
              colorIndex++;
            } else {
              colorIndex = 0;
            }
          });
        }
      });
    };
    shuffle = function(array) {
      var i, m, t;
      m = array.length;
      t = void 0;
      i = void 0;
      while (m) {
        i = Math.floor(Math.random() * m--);
        t = array[m];
        array[m] = array[i];
        array[i] = t;
      }
      return array;
    };
    random = function(min, max) {
      return Math.floor(Math.random() * (max - min)) + min;
    };
    $('.max.text .shadow').hover(function() {
      return $(this).parents('.text').toggleClass('tease');
    });
    $('.max.text .shadow').on('click', function() {
      var shadow, text;
      shadow = $(this);
      text = shadow.parents('.text')[0];
      return $(text).transition({
        maxHeight: text.scrollHeight + 'px'
      }, 200, function() {
        shadow.remove();
        $(text).css({
          maxHeight: 'unset'
        });
        return console.log($(text).css('maxHeight'));
      });
    });
    $('.action').click(function() {
      var action;
      action = $(this).attr('data-action');
      switch (action) {
        case 'peace':
          return addPalette();
        case 'love':
          return addStyle();
      }
    });
    theStyle = void 0;
    player = void 0;
    return init();
  });

}).call(this);
