@import url('https://fonts.googleapis.com/css2?family=IBM+Plex+Mono:wght@400;500&display=swap');

@import 'vars';

* {
	box-sizing: border-box;
}


::-webkit-scrollbar {
	width: 5px;
}
::-webkit-scrollbar-track {
	background: rgba(0,0,0,.05);
}
::-webkit-scrollbar-thumb {
	background: rgba(0,0,0,.05);
}
::-webkit-scrollbar-thumb:hover {
	background: rgba(0,0,0,1);
}

html, body {
	background-color: transparent;
	@include desktop {
		overflow: hidden;
	}
}

html {
	font-family: 'IBM Plex Mono', monospace;
	font-size: 14px;
	line-height: 1.2em;
	color: rgba(0,0,0,.85);
}

body {
	margin: 0;
	transition: background-color $bg-dur linear;
}

h1, h2, h3, h4 {
	font-family: 'Old Standard TT', serif;
	margin: 0;
	display: inline-block;
}

h1, h2 {
	font-size: 1.75rem;
	font-weight: normal;
}

a {
	color: inherit;
	text-decoration: none;
	text-decoration: underline;
	text-decoration-color: rgba(0,0,0,.25);
	text-decoration-thickness: 1px;
	&:hover {
		text-decoration-color: rgba(0,0,0,.5);
	}
}

p {
	margin: .5rem 0;
	&:last-child {
		margin-bottom: 0;
	}
}

strong {
	font-weight: 500;
}

s {
	text-decoration-color: rgba(0,0,0,.5);
}

small {
	font-size: .9rem;
}

ul {
	margin: 0;
	padding: 0;
	&:not(:last-child) {
		margin-bottom: 1rem;
	}
}

li {
	list-style: none;
	position: relative;
}

#page {
	width: 100%;
	@include desktop {
		height: 100vh;
		display: flex;
		flex-direction: column;
	}
}

header#header {
	padding: 2rem 0;
	border-bottom: 1px solid black;
	z-index: 2;
	@include desktop {
		padding: 3rem 0;
	}
	.flex {
		align-items: flex-end;
	}
	.column {
		padding: 0 2rem;
		@include desktop {
			padding: 0 3rem;
		}
	}
}

main {
	overflow: hidden;
}

.flex {
	display: flex;
	flex-wrap: wrap;
	main > & {
		height: 100%;
		overflow: hidden;
	}
}

.column {
	width: 100%;
	height: 100%;
	@include desktop {
		width: 50%;
	}
}

.scroll {
	@include desktop {
		&:not(:last-child) {
			border-right: 1px solid;
		}
		overflow-y: scroll;
		-webkit-overflow-scrolling: touch;
	}
}

section {
	padding: 2rem;
	position: relative;
	overflow: visible;
	border-bottom: 1px solid;
	@include desktop {
		padding: 3rem;
	}
	@include desktop {
		&:last-of-type {
			border-bottom: 0;
		}
	}
	header {
		margin-bottom: 1rem;
	}
}

aside {
	margin-bottom: 1rem;
}

[title] {
	cursor: help;
}

ul.nested {
	li {
		max-width: 32rem;
		padding-left: 1.25em;
		margin-top: .5em;
		&::before {
			content: "";
			width: .5em;
			height: .5em;
			display: block;
			position: absolute;
			left: 0;
			top: 0;
			border: solid black;
			border-width: 0 0 1px 1px;
		}
		&.website::before {
			content: "*";
			top: 0;
			border: 0;
		}
	}
	> li {
		break-inside: avoid;
		position: relative;
		&:not(:last-child) {
			margin-bottom: 1rem;
		}
		> ul > li:not(:last-child) {
			margin-bottom: 1em;
		}
		&::before {
			border-left-width: 0;
		}
		li:not(:last-child)::after {
			content: "";
			width: 1px;
			height: calc(100% + .5rem);
			display: block;
			position: absolute;
			left: 0;
			top: .5rem;
			background-color: black;
			// background: linear-gradient(0deg, black, transparent);
		}
	}
}

ul.inline {
	display: inline-block;
	li {
		display: inline-block;
	}
}

details {
	white-space: pre-line;
	> small {
		display: block;
		line-height: 1.5em;
	}
	&[open] {
		> small {
			position: relative;
			padding-left: 1rem;
			&::before {
				content: "";
				position: absolute;
				left: 0;
				top: .2rem;
				width: 1px;
				height: calc(100% - .4rem);
				background-color: rgba(0,0,0,.85);
			}
		}
	}
	ul {
		display: table;
		li {
			&::before {
				top: .2em !important;
				border-left-width: 0 !important;
			}
			&::after {
				display: none !important;
			}
		}
	}
}
summary {
	margin: .5rem 0 .5rem 0;
	display: inline-block;
	list-style: none;
	cursor: pointer;
	text-decoration: underline;
	text-decoration-color: rgba(0,0,0,.25);
	text-decoration-thickness: 1px;
	user-select: none;user-select: none;
	&::marker,
	&::-webkit-details-marker {
		display: none;
	}
	&::after {
	  content: "âž¤";
	  display: inline-block;
	  margin-left: .5em;
	  transform: rotate(90deg);
	}
	details[open] & small:first-of-type,
	details:not([open]) & small:last-of-type {
		display: none;
	}
	details[open] &:after {
	  transform: rotate(-90deg);
	}
}